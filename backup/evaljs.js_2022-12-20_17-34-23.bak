const EvaljsI = {
    _(builder, output, text, a, b, c) {
        this.output = builder.var(output);
        this.text = builder.var(text);
        this.a = builder.var(a);
        this.b = builder.var(b);
        this.c = builder.var(c);
        this.err = this.output;
        this.bud = builder;
    },

    run(exec) {
        // f = new Function("arg", exec.obj(this.text)); // run error
        a = this.a;
        b = this.b;
        c = this.c;
        t = this;
        const to = x => exec.obj(x); // get id value to obj
        const tn = x => exec.num(x); // get id value to num
        const so = (k, v) => {exec.setobj(k, v); return v}; // set id value to obj
        const sn = (k, v) => {exec.setnum(k, v); return v}; // set id value to num
        const se = x => this.err = x; // set error output var (default: output)
        const gv = x => this.bud.var(x); // get var id
        result = null;
        try {
            result = eval(to(this.text));
        } catch (e) {
            let errinfo = e.name + "\n" + e.message + "\n";
            so(this.err, errinfo);
            if(this.err == this.output) return;
            
        }
        switch(typeof(result)) {
            case "number":
                exec.setnum(this.output, result);
                break;
            default:
                exec.setobj(this.output, result);
                break;
        }
    }
};

const EvaljsStatement = {
    new: words => {
        const st = extend(LStatement, Object.create(EvaljsStatement));
        st.read(words);
        return st;
    },

    read(words) {
        this.output = words[1] || "result";
        this.text = words[2] || '""';
        this.a = words[3] || '0';
        this.b = words[4] || '0';
        this.c = words[5] || '0';
    },

    build(h) {
        if (h instanceof Table) {
            return this.buildt(h);
        }

        const inst = extend(LExecutor.LInstruction, Object.create(EvaljsI));
        inst._(h, this.output, this.text, this.a, this.b, this.c);
        return inst;
    },

    buildt(table) {
        const add = (sep, name) => {
            table.add(sep).left().marginLeft(10);
            this.field(table, this[name], str => {this[name] = str}).left().padLeft(10).padRight(10).width(100).left().color(table.color).get();
        };
		this.row(table);
		
        add("", "output");
		this.row(table);
        add("=eval", "text");
		this.row(table);
        add("a=", "a");
		this.row(table);
        add("b=", "b");
		this.row(table);
        add("c=", "c");
        this.row(table);
    },

    write(b) {
        b.append("evaljs ");

        b.append(this.output);
        b.append(" ");

        b.append(this.text);
        b.append(" ");

        b.append(this.a);
        b.append(" ");

        b.append(this.b);
        b.append(" ");

        b.append(this.c);
    },

    name: () => "EvalJs",
    color: () => Pal.logicIo
};

global.anuke.register("evaljs", EvaljsStatement, [
    "evaljs",
    "",
    "",
    "",
    "",
    ""
]);

module.exports = EvaljsStatement;
