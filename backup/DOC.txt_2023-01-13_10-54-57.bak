mod:
    目前EvalJs, Lock 支持135, 140

logic:
    EvalJs:
        function:
            to(x)[to object]:
                get id var value to obj

            tn(x)[to number]:
                get id var value to num

            tb(x)[to builder]:
                get id var value to builder

            so(k, v)[set object]:
                set id is k var value to v, type is obj

            sn(k, v)[set num]:
                set id is k var value to v, type is num

            se(x)[set stderr]:
                set error output var id

            gv(x)[get var]:
                get string-var id

            df(text)[define function]:
                get eval text func
                args: x0, x1, x2, x3, x4, x5, x6, x7, x8, x9
                Example:
                    const func = df("let a = x0 + x1; a")
            
            echo(target, text)[echo]:
                if target is null or is undefined then
                    对 target 覆盖输出
                else
                    对 target 追加输出
            
            String().fmt(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)[str format]:
                String() 被格式化的文本
                x[0-9] 参数
                越界替换会替换为空字串
                Syntax:
                    "%0 %2 %1".fmt(1, 2, 3) -> "1 3 2"
                mode:
                    %% = %
                    %[0-9] = string
                    
            is_empty(x)[if x if is empty]:
                x 为 null 或 undefined 返回 true
                    否则返回 false
            
            get_err_info(e)[format error info]:
                返回格式化的错误信息

        variable:
            t: this
            t.bud: build obj
            t.err: error message output var id
            a = t.a
            b = t.b
            c = t.c
            _ = eval
        
        Syntax:
            FuncMacro:
                转换后的脚本存于 script 变量
                注意: '#' 前面不能有空格, 必须紧贴行开头
                注意: 参数列表仅支持标准的标识符, 否则会报错
                注意: 因 mdt 内置 js引擎 的一些 bug, 返回值也会进行一定的转换:
                    例如
                        return a + 2
                    变为
                        {let ___= a + 2
                        return eval('___')}
                    请不要写例如 if(y)return x;else return z
                        这样的叠行 return, 这会干扰表达式匹配
                        匹配规则为 /((^|\n)\s*)return\s*(.*)($|\n)/
                    请不要写空的 return
                    你也可以使用 @ 替代 return, 例如 @a + b
                格式:
                    #<function name> [...args]
                    #<function1 name> [...args]
                    #
                    整行以单独一个 '#' 结束
                Example:
                    #add a b
                        return a + b;
                    #get arr
                        return arr[0];
                    #
                    pass
                    会展开为
                    function add(a, b) {
                        {let ___= a + b;
                        return eval('___')}
                    }
                    function get(arr) {
                        {let ___= arr[0];
                        return eval('___')}
                    }
                    
                    pass
    Lock:
        失败例如下标越界返回 -1
        PID为假代表锁被释放
        目标为内存某位
        情况可以通过PID与目标的逻辑异或分为两种
        当PID为假时，且目标为真时，释放锁，将目标设置为PID，返回0
        当PID为真时，且目标为假时，获取锁，将目标设置为PID，返回0
        当PID为真时，且目标为真时，不做任何操作，返回目标
        当PID为假时，且目标为假时，不做任何操作，返回目标
    Sort:
        sort target start stop reverse insertion_sort_threshold
        排序区间为 [start, stop)
        如任意一方越界则不操作
        使用算法为 Quick Sort + Insertion Sort，快速排序与插入排序
        快速排序为我优化的版本，加入了：
            取区间正中做基准数、尾递归优化、
            相同元素交替分布于基准值两侧、
            小于阈值使用简单插入排序
            几个优化方案。
    Swap:
        交换内存 from 中 下标 a & b 的值
        如任意一方越界则不操作
    Reverse:
        反转内存 from 中 区间 [a, b] 的值
        如任意一方越界或 a >= b 则不操作
        反转时双指针从 a, b 相向而行，每次走 step 步并交换指向的值

block:
    super-message:
        强化信息板
        比普通信息板更强, 可以存储一万行。
        受限于 mdt 的限制, 最多存储 65535 个 Byte。
                注意是 Byte 而不是一个 Unicode 字符
