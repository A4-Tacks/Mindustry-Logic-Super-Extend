const LockI = {
	_(builder, pid, output, target) {
		this.pid = pid;
		this.output = builder.var(output);
		this.target = builder.var(target);

	},

	run(vm) {
	}
};

const LockStatement = {
	new: words => {
		const st = extend(LStatement, Object.create(LockStatement));
		st.read(words);
		return st;
	},

	read(words) {
		this.pid = words[1] == "pid";
		this.output = words[2] || "";
		this.target = words[3] || "";
	},

	build(h) {
		if (h instanceof Table) {
			return this.buildt(h);
		}

		const inst = extend(LExecutor.LInstruction, Object.create(LockI));
		inst._(h, this.pid, this.output, this.target);
		return inst;
	},

	buildt(table) {
		const add = name => {
			table.add(name).left().marginLeft(10);
			this.field(table, this[name], text => {this[name] = text}).width(150);
		};

		add("pid");
		this.row(table);
		add(" ");
		add("=");
	},

	write(b) {
		b.append("lock ");
		b.append(this.pid);

		b.append(this.output);
		b.append(" ");
		b.append(this.target);
	},

	name: () => "Lock",
	color: () => Pal.logicIo
};

global.anuke.register("lock", LockStatement, [
	"lock",
	"pid",
	"result",
	"cell1"
]);

module.exports = LockStatement;
