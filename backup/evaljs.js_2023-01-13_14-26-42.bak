const EvaljsI = {
    _(builder, output, text, a, b, c, err) {
        this.output = builder.var(output);
        this.text = builder.var(text);
        this.a = builder.var(a);
        this.b = builder.var(b);
        this.c = builder.var(c);
        this.err = builder.var(err);
        this.bud = builder;
    },

    run(exec) {
        // f = new Function("arg", exec.obj(this.text)); // run error
        var t = this;
        var a = this.a;
        var b = this.b;
        var c = this.c;
        var ot = this.output;
        var source = "" + exec.obj(this.text);
        var result, e;

        // functions
        const to = x => exec.obj(x); // get id value to obj
        const tn = x => exec.num(x); // get id value to num
        const tb = x => {
            let from = exec.building(x);
            if (from === null || from.team != exec.team)
                return null;
            return from;
        }; // get id value to builder

        const so = (k, v) => {exec.setobj(k, v); return v}; // set id value to obj
        const sn = (k, v) => {exec.setnum(k, v); return v}; // set id value to num
        const se = x => this.err = x; // set error output var (default: output)

        const gv = x => this.bud.var(x); // get var id

        const echo = (target, text) => {
            let v = to(target);
            so(target, (v === null || v === undefined)
                    ? text + "\n" : v + "" + text + "\n")
        };
        
        const get_err_info = (e) => "%0\n%1\n%2\n".fmt(e.name, e.message, e.stack);

        so(this.err, null);  // set default value is null
        so(this.output, null);

        // 快捷函数定义宏展开
        let script;
        try {
            script = function_macro(source);
        } catch (e) {
            so(this.err, get_err_info(e));
            return;
        }

        result = null;

        try {
            result = eval(script);
        } catch (e) {
            so(this.err, get_err_info(e));
        }
        if (is_empty(result))
            return;

        if (typeof(result) == "number" || (result instanceof Number)) {
            if (to(this.output) === null) {
                exec.setnum(this.output, result);
            } else {
                echo(this.output, result);
            }
        } else {
            echo(this.output, result);
        }
    }
};

const EvaljsStatement = {
    new: words => {
        const st = extend(LStatement, Object.create(EvaljsStatement));
        st.read(words);
        return st;
    },

    read(words) {
        this.output = words[1] || "result";
        this.text = words[2] || '""';
        this.a = words[3] || '0';
        this.b = words[4] || '0';
        this.c = words[5] || '0';
        this.err = "err";
    },

    build(h) {
        if (h instanceof Table) {
            return this.buildt(h);
        }

        const inst = extend(LExecutor.LInstruction, Object.create(EvaljsI));
        inst._(h, this.output, this.text, this.a, this.b, this.c, this.err);
        return inst;
    },

    buildt(table) {
        const add = (sep, name) => {
            table.add(sep).marginLeft(sep.length).left();
            this.row(table);
            this.field(table, this[name], str => {this[name] = str}).left();
            this.row(table);
        };
        add("", "output");
        add("eval", "text");
        add("a=", "a");
        add("b=", "b");
        add("c=", "c");
    },

    write(b) {
        b.append("evaljs ");

        b.append(this.output);
        b.append(" ");

        b.append(this.text);
        b.append(" ");

        b.append(this.a);
        b.append(" ");

        b.append(this.b);
        b.append(" ");

        b.append(this.c);
        b.append(" ");

        b.append(this.err);
    },

    name: () => "EvalJs",
    color: () => Pal.logicIo
};

global.anuke.register("evaljs", EvaljsStatement, [
    "evaljs",
    "",
    "",
    "",
    "",
    "",
    ""
]);

module.exports = EvaljsStatement;

/* constant */
const ROOT = this;

/* Lib */
const doc = () => null;

const is_empty = (x) => (x === null) || (x === undefined);

const set_read_only_attribute = (obj, attribute) => {
    if (!(attribute in obj))
        return false;
    Object.defineProperty(obj, attribute, {
        value: obj[attribute],
        writable: false,
    });
    return true;
}

const set_all_read_only_attribute = (obj) => {
    if (is_empty(obj) || !(obj instanceof Object))
        return;
    for (let i in obj)
        set_read_only_attribute(obj, i);
}

String.prototype.fmt = function(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) {
    let num;
    let len = 0;
    let format = this;
    let args = [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9].map(
        (x) => {
                if (x === undefined) {return "";}
            else {++len; return "" + x;}
    });
    return format.replace(/%[0-9%]/g, (x) => {
        if (x == "%%") return "%";
        else return ((num = parseInt(x[1])) < len)
            ? args[num] : "";
    });
}

const df = (text) => ((x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) => 
    eval(text));

const message = {
    appendMessage: function(from, text) {
        doc("将 text 追加到目标信息板的");
        // if is not message and team not eq
        if (is_empty(from) || !(from instanceof MessageBlock.MessageBuild))
            return;
        from.message.append("" + text);
        return true;
    },
    updateMessage: function(from, text) {
        doc("将目标信息板的内容更新为 text");
        // if is not message and team not eq
        if (is_empty(from) || !(from instanceof MessageBlock.MessageBuild))
            return;
        from.message.setLength(0);
        from.message.append("" + text);
        return true;
    }
}

const function_macro = function(script) {
    doc("快捷函数定义宏展开");
    let lines = script.split("\n");
    let fname, temp, is_macro_a, fline;
    let length = lines.length;
    let i = 0;
    let in_func = false;
    let args, len;
    let t_lines = new Array();
    let has_return_regExp = /^(\s*)(@|return\b)\s*(.*)$/;
    let has_return;
    let default_result = "return eval('')";
    let indent = " ".repeat(4);
    const indent_push = (x) => t_lines.push(indent + x);
    for (; i < length; ++i) {
        is_macro_a = false;
        line = lines[i];
        len = line.length;
        if (len == 0) {
            indent_push("");
            continue; // skip empty line
        }
        if (line[0] == "#") {
            is_macro_a = true; // 使用标记完成跨块处理
            if (in_func) {
                // write func
                if (!has_return)
                    indent_push(default_result); // 当没有返回值则添加缺省
                t_lines.push("}");
            }
            // 井号打头表结束函数内标识
            in_func = false;
        }
        if (temp = line.match(/^#([a-zA-Z_][a-zA-Z0-9_]*)/)) {
            in_func = true; // force set in_func
            has_return = false;
            fname = temp[1];
            //args = line.slice(fname.length + 1).trim().split(/\s+/); // fun args string
            // 因mdt的js引擎bug，导致以上代码的结果不正确
            // 在 rhino1.7.10 rhino1.7.14 nodejs12.22.9 均无问题
            /* 如果将其改为:
             * args = line.slice(fname.length + 1).trim().split(/\s{10,}/)
             * 还会崩游戏，log: FAILED ASSERTION: invalid bytecode
             * 所以不使用正则一次分割而是先分割至临时数组再将非空元素加入目标
             */
            temp = line.slice(fname.length + 1).trim().split(/\s/); // fun args string
            args = [];
            temp.map((x) => {
                if (x.length > 0)
                    args.push(x);
            });
            for (let j in args) {
                // 参数检查
                if (!args[j].match(/^[a-zA-Z_][a-zA-Z0-9_]*$/))
                    throw Error("line:%0; func:%1; args:[%2]; arg:%3; line:%4; 标识符格式错误"
                        .fmt(i + 1, fname, args.join(","), args[j], line));
            }
            t_lines.push("function %0(%1) {".fmt(fname, args.join(", ")));
        } else {
            if (is_macro_a) {
                // 当一行宏展开控制符并没有定义时说明是一个结束符
                // 检查是否符合一个结束符的长度
                if (len != 1)
                    throw Error("line:%0; >%1<; 宏定义结束符格式错误, 需要/^#$/"
                        .fmt(i + 1, line));
                continue;
            }
            if (in_func) {
                // 函数体处理
                if (temp = line.match(has_return_regExp)) {
                    has_return = true;
                    if (temp[3].length > 0) {
                        temp = line.replace(has_return_regExp,
                            "$1{let ___= $3 \n$1return eval('___')}").split("\n");
                        indent_push(temp[0]);
                        indent_push(temp[1]);
                    } else {
                        indent_push(default_result);
                    }
                    continue;
                }
            }
            if (in_func)
                indent_push(line);
            else
                t_lines.push(line);
        }
    }
    if (in_func)
        throw Error("line:%0; function %1(%2); 宏定义未结束, 你是否忘了 /^#$/ ?"
            .fmt(i + 1, line));
    return t_lines.join("\n");
}
