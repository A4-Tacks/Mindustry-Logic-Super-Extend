const doc = () => null;
const Lib = {
    message: {
        updateMessage: function(from, text) {
             doc("将目标信息板的内容替换为 text")
            // if is not message and team not eq
            if ((from === null) || !(from instanceof MessageBlock.MessageBuild))
                return;
            from.message.setLength(0);
            from.message.append("" + exec.obj(this.text));
            return true;
        }
    },
    function_macro: function(script) {
        let lines = script.split("\n");
        let fname, temp, is_macro_a;
        let length = lines.length;
        let i = 0;
        let in_func = false;
        let args, len;
        let t_lines = new Array();
        let has_return_regExp = /^(\s*)(@|return\b)\s*(.*)$/;
        let has_return;
        let default_result = "return eval('')";
        let indent = " ".repeat(4);
        const indent_push = (x) => t_lines.push(indent + x);
        for (; i < length; ++i) {
            is_macro_a = false;
            line = lines[i];
            len = line.length;
            if (len == 0) {
                indent_push("");
                continue; // skip empty line
            }
            if (line[0] == "#") {
                is_macro_a = true; // 使用标记完成跨块处理
                // 井号打头表反转状态
                in_func = !in_func;
                if (!in_func) {
                    // write func
                    if (!has_return)
                        indent_push(default_result); // 当没有返回值则添加缺省
                    t_lines.push("}");
                }
            }
            if (temp = line.match(/^#([a-zA-Z_][a-zA-Z0-9_]*)/)) {
                in_func = true; // force set in_func
                has_return = false;
                fname = temp[1];
                args = line.slice(fname.length + 1).trim().split(/ */); // fun args string
                for (let j in args) {
                    // 参数检查
                    if (!args[j].match(/^[a-zA-Z_][a-zA-Z0-9_]*$/))
                        throw Error("line:%0; func:%1; arg:%2; 标识符格式错误"
                            .fmt(i + 1, fname, args[j]));
                }
                t_lines.push("function %0(%1) {".fmt(fname, args.join(", ")));
            } else {
                if (is_macro_a) {
                    // 当一行宏展开控制符并没有定义时说明是一个结束符
                    // 检查是否符合一个结束符的长度
                    if (len != 1)
                        throw Error("line:%0; >%1<; 宏定义结束符格式错误, 需要/^#$/"
                            .fmt(i + 1, line));
                    continue;
                }
                if (in_func) {
                    // 函数体处理
                    if (temp = line.match(has_return_regExp)) {
                        has_return = true;
                        if (temp[3].length > 0) {
                            temp = line.replace(has_return_regExp,
                                "$1{let ___= $3 \n$1return eval('___')}").split("\n");
                            indent_push(temp[0]);
                            indent_push(temp[1]);
                        } else {
                            indent_push(default_result);
                        }
                        continue;
                    }
                }
                if (in_func)
                    indent_push(line);
                else
                    t_lines.push(line);
            }
        }
        return t_lines.join("\n");
    }
}

