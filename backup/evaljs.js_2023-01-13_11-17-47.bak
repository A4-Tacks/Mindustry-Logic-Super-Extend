const EvaljsI = {
    _(builder, output, text, a, b, c, err) {
        this.output = builder.var(output);
        this.text = builder.var(text);
        this.a = builder.var(a);
        this.b = builder.var(b);
        this.c = builder.var(c);
        this.err = builder.var(err);
        this.bud = builder;
    },

    run(exec) {
        // f = new Function("arg", exec.obj(this.text)); // run error
        var t = this;
        var a = this.a;
        var b = this.b;
        var c = this.c;
        var ot = this.output;
        var source = "" + exec.obj(this.text);
        var result, e;

        // functions
        const to = x => exec.obj(x); // get id value to obj
        const tn = x => exec.num(x); // get id value to num
        const tb = x => {
            let from = exec.building(x);
            if (from === null || from.team != exec.team)
                return null;
            return from;
        }; // get id value to builder

        const so = (k, v) => {exec.setobj(k, v); return v}; // set id value to obj
        const sn = (k, v) => {exec.setnum(k, v); return v}; // set id value to num
        const se = x => this.err = x; // set error output var (default: output)

        const gv = x => this.bud.var(x); // get var id

        const df = (text) => ((x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) => 
            eval(text)); // get func

        const echo = (target, text) => {
            let v = to(target);
            so(target, (v === null || v === undefined)
                    ? text + "\n" : v + "" + text + "\n")
        };
        
        String.prototype.fmt = function(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) {
            let num;
            let len = 0;
            let format = this;
            let args = [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9].map(
                (x) => {
                        if (x === undefined) {return "";}
                    else {++len; return "" + x;}
            });
            return format.replace(/%[0-9%]/g, (x) => {
                if (x == "%%") return "%";
                else return ((num = parseInt(x[1])) < len)
                    ? args[num] : "";
            });
        }

        const get_err_info = (e) => "%0\n%1\n%2\n".fmt(e.name, e.message, e.stack);

        const is_empty = (x) => (x === null) || (x === undefined);

        so(this.err, null);  // set default value is null
        so(this.output, null);

        // 快捷函数定义宏展开
        let script = source;
        // try {
            // script = Lib.function_macro(source);
        // } catch (e) {
            // so(this.err, get_err_info(e));
            // return;
        // }

        result = null;

        try {
            result = eval(script);
        } catch (e) {
            so(this.err, get_err_info(e));
        }
        if (is_empty(result))
            return;

        if (typeof(result) == "number" || (result instanceof Number)) {
            if (to(this.output) === null) {
                exec.setnum(this.output, result);
            } else {
                echo(this.output, result);
            }
        } else {
            echo(this.output, result);
        }
    }
};

const EvaljsStatement = {
    new: words => {
        const st = extend(LStatement, Object.create(EvaljsStatement));
        st.read(words);
        return st;
    },

    read(words) {
        this.output = words[1] || "result";
        this.text = words[2] || '""';
        this.a = words[3] || '0';
        this.b = words[4] || '0';
        this.c = words[5] || '0';
        this.err = "err";
    },

    build(h) {
        if (h instanceof Table) {
            return this.buildt(h);
        }

        const inst = extend(LExecutor.LInstruction, Object.create(EvaljsI));
        inst._(h, this.output, this.text, this.a, this.b, this.c, this.err);
        return inst;
    },

    buildt(table) {
        const add = (sep, name) => {
            table.add(sep).marginLeft(sep.length).left();
            this.row(table);
            this.field(table, this[name], str => {this[name] = str}).left();
            this.row(table);
        };
        add("", "output");
        add("eval", "text");
        add("a=", "a");
        add("b=", "b");
        add("c=", "c");
    },

    write(b) {
        b.append("evaljs ");

        b.append(this.output);
        b.append(" ");

        b.append(this.text);
        b.append(" ");

        b.append(this.a);
        b.append(" ");

        b.append(this.b);
        b.append(" ");

        b.append(this.c);
        b.append(" ");

        b.append(this.err);
    },

    name: () => "EvalJs",
    color: () => Pal.logicIo
};

global.anuke.register("evaljs", EvaljsStatement, [
    "evaljs",
    "",
    "",
    "",
    "",
    "",
    ""
]);

module.exports = EvaljsStatement;
