const SortI = {
    _(builder, target, start, stop, compare, insertion_threshold, err) {
        this.target = builder.var(target);
        this.start = builder.var(start);
        this.stop = builder.var(stop);
        this.err = builder.var(err);
        this.compare = builder.var(compare);
        this.insertion_threshold = builder.var(insertion_threshold);
        this.builder = builder;
    },

    run(exec) {
        from = exec.building(this.target);  // get mem

        // if is mem and team eq
        if (!(from === null) && from instanceof MemoryBlock.MemoryBuild
                && from.team == exec.team) {
            mem = from.memory;
            
            start = exec.numi(this.start); // get type is int num
            stop = exec.numi(this.stop);
            insertion_threshold = exec.numi(this.insertion_threshold);
            is_compare = exec.numi(this.compare);

            if (start < 0)
                let start = 0;
            if (stop > mem.length)
                let stop = mem.length;  // 防止越界

            if (start >= stop)
                return;

            const swap = (a, b) => {
                temp = mem[a];
                mem[a] = mem[b];
                mem[b] = temp;
            }
            const oswap = (a, b, other) => {
                mem[a] = mem[b];
                mem[b] = other;
            }
            const mid = (a, b) => a + ((b - a) >> 1);
            
            insertion_sort = (start, stop) => {
                for (let i=start + 1; i < stop; ++i){
                    let num = mem[i];
                    for (var j=i; j > start && compare(mem[j - 1], num) == 1; --j)
                        mem[j] = mem[j - 1];
                    mem[j] = num;
                }
            }
            
            quick_sort = (l, r) => {
                while (l < r){
                    if (r - l < insertion_threshold){
                        insertion_sort(l, r + 1);
                        return;
                    }
                    swap(mid(l, r), r);
                    var pivot = mem[r];
                    var j = l;
                    var tag = true;
                    for (let i=l; i < r; ++i){
                        num = mem[i];
                        if (compare(num, pivot) == -1){
                            oswap(i, j++, num);
                        } else if (compare(num, pivot) == 0 && (tag=!tag)){
                            oswap(i, j++, num);
                        }
                    }
                    swap(r, j);
                    quick_sort(l, j - 1);
                    l = j + 1
                }
            }
            try {
                let cmd = exec.obj(this.compare);
                
                switch (cmd) {
                    var compare = eval("(a, b) => " + cmd);
                }
                quick_sort(start, stop - 1);
            } catch (e) {
                exec.setobj(this.err, "" + e.name + "\n" + e.message + "\n");
            }
        }
    }
};

const SortStatement = {
    new: words => {
        const st = extend(LStatement, Object.create(SortStatement));
        st.read(words);
        return st;
    },

    read(words) {
        this.target = words[1] || "cell1";
        this.start = words[2] || "0";
        this.stop = words[3] || "64";
        this.compare = words[4] || "a<b?-1:a>b?1:0";
        this.insertion_threshold = words[5] || "10";
        this.err = "err";
    },

    build(h) {
        if (h instanceof Table) {
            return this.buildt(h);
        }

        const inst = extend(LExecutor.LInstruction, Object.create(SortI));
        inst._(h, this.target, this.start,
                this.stop, this.compare, this.insertion_threshold, this.err);
        return inst;
    },

    buildt(table) {
        const add = (sep, name) => {
            table.add(sep);
            this.field(table, this[name], str => {this[name] = str});
            this.row(table);
        };
        
        add("", "target");
        add("<-[", "start");
        add(",", "stop");
        add("),compare=", "compare");
        add(",insert_len=", "insertion_threshold");
    },

    write(b) {
        b.append("sort ");

        b.append(this.target);
        b.append(" ");

        b.append(this.start);
        b.append(" ");

        b.append(this.stop);
        b.append(" ");

        b.append(this.compare);
        b.append(" ");

        b.append(this.insertion_threshold);
        b.append(" ");

        b.append(this.err);
    },

    name: () => "Sort",
    color: () => Pal.logicIo
};

global.anuke.register("sort", SortStatement, [
    "sort",
    "",
    "",
    "",
    "",
    "",
    ""
]);

module.exports = SortStatement;
